---
apiVersion: v1
kind: Secret
metadata:
  name: immich-db-secret
  namespace: immich
type: Opaque
data:
  password: cG9zdGdyZXM= # base64 encoded 'postgres' - change this to a secure password
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-db-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-uploads-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi # Adjust size based on your needs
  storageClassName: gp3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-model-cache-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-postgres
  namespace: immich
  labels:
    app: immich-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-postgres
  template:
    metadata:
      labels:
        app: immich-postgres
    spec:
      restartPolicy: Always
      containers:
      - name: postgres
        image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:32324a2f41df5de9efe1af166b7008c3f55646f8d0e00d9550c16c9822366b4a
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: password
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_DB
          value: immich
        - name: POSTGRES_INITDB_ARGS
          value: '--data-checksums'
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata # Use subdirectory to avoid lost+found
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: db-vol
          mountPath: /var/lib/postgresql/data
        - name: dshm
          mountPath: /dev/shm
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: db-vol
        persistentVolumeClaim:
          claimName: immich-db-pvc
      - name: dshm
        emptyDir:
          medium: Memory
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-redis
  namespace: immich
  labels:
    app: immich-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-redis
  template:
    metadata:
      labels:
        app: immich-redis
    spec:
      restartPolicy: Always
      containers:
      - name: redis
        image: docker.io/valkey/valkey:8-bookworm@sha256:a137a2b60aca1a75130022d6bb96af423fefae4eb55faf395732db3544803280
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-ml
  namespace: immich
  labels:
    app: immich-ml
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-ml
  template:
    metadata:
      labels:
        app: immich-ml
    spec:
      restartPolicy: Always
      containers:
      - name: ml
        image: ghcr.io/immich-app/immich-machine-learning:release
        env:
        - name: MACHINE_LEARNING_CACHE_FOLDER
          value: /cache
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: model-cache
          mountPath: /cache
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: immich-model-cache-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: immich
  labels:
    app: immich-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      restartPolicy: Always
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: [ 'sh', '-c', 'until nc -z immich-postgres-svc 5432; do echo "Waiting for PostgreSQL..."; sleep 2; done;' ]
      containers:
      - name: server
        image: ghcr.io/immich-app/immich-server:release
        env:
        - name: DB_HOSTNAME
          value: immich-postgres-svc
        - name: DB_PORT
          value: "5432"
        - name: DB_USERNAME
          value: postgres
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: password
        - name: DB_DATABASE_NAME
          value: immich
        - name: REDIS_HOSTNAME
          value: immich-redis-svc
        - name: REDIS_PORT
          value: "6379"
        - name: MACHINE_LEARNING_URL
          value: http://immich-ml-svc:3003
        ports:
        - containerPort: 2283
          protocol: TCP
        resources:
          requests:
            cpu: "300m"
            memory: "512Mi"
          limits:
            cpu: "600m"
            memory: "1Gi"
        volumeMounts:
        - name: uploads-vol
          mountPath: /data
      volumes:
      - name: uploads-vol
        persistentVolumeClaim:
          claimName: immich-uploads-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgres-svc
  namespace: immich
  labels:
    app: immich-postgres
spec:
  ports:
  - protocol: TCP
    name: postgres
    port: 5432
    targetPort: 5432
  selector:
    app: immich-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: immich-redis-svc
  namespace: immich
  labels:
    app: immich-redis
spec:
  ports:
  - protocol: TCP
    name: redis
    port: 6379
    targetPort: 6379
  selector:
    app: immich-redis
---
apiVersion: v1
kind: Service
metadata:
  name: immich-ml-svc
  namespace: immich
  labels:
    app: immich-ml
spec:
  ports:
  - protocol: TCP
    name: ml
    port: 3003
    targetPort: 3003
  selector:
    app: immich-ml
---
apiVersion: v1
kind: Service
metadata:
  name: immich-server-svc
  namespace: immich
  labels:
    app: immich-server
spec:
  ports:
  - protocol: TCP
    name: http
    port: 2283
    targetPort: 2283
  selector:
    app: immich-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich-ingress
  namespace: immich
  labels:
    app: immich-server
spec:
  rules:
  - host: "immich.init0xff.com" # Replace with your desired hostname
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: immich-server-svc
            port:
              number: 2283
